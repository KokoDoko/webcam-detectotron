{"version":3,"sources":["js/knear.js","js/util.js","js/grid.js"],"names":["KNear","constructor","k","training","learn","vector","label","obj","v","lab","push","classify","voteBloc","maxD","forEach","o","d","dist","vote","length","updateMax","bool","count","Number","splice","votes","el","mode","v1","v2","sum","val","index","Math","pow","sqrt","arr","max","store","frequency","result","Util","rgbToDecimal","red","green","blue","r","g","b","decimalToRgb","decNumber","alpha","console","log","rgbToHex","toString","App","machine","images","labelcam","learned","document","getElementById","video","querySelector","canvas","context","getContext","numpixels","width","height","intervalid","webcamData","initVideoStream","initSettings","offsetWidth","offsetHeight","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","imageSmoothingEnabled","initButtons","drawMosaic","setInterval","displayPixelData","btns","getElementsByClassName","i","addEventListener","e","recordData","img","createElement","src","toDataURL","appendChild","labelWebcam","drawImage","setTimeout","pos","col","row","floor","x","y","p","getImageData","data","decimalColor","navigator","mediaDevices","getUserMedia","then","stream","srcObject","catch","error","body","textContent","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEAA;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEe,MAAMwD,GAAN,CAAU;AACrBvD,kBAAc;AACV,aAAKwD,OAAL,GAAe,oBAAU,CAAV,CAAf;;AAEA,aAAKC,MAAL,GAAc,mDAAd;;AAEA,aAAKC,QAAL,GAAgB,KAAhB;;AAEA,aAAKC,OAAL,GAAeC,SAASC,cAAT,CAAwB,SAAxB,CAAf;AACA,aAAKC,KAAL,GAAaF,SAASG,aAAT,CAAuB,OAAvB,CAAb;AACA,aAAKC,MAAL,GAAcJ,SAASG,aAAT,CAAuB,SAAvB,CAAd;AACA,aAAKE,OAAL,GAAe,KAAKD,MAAL,CAAYE,UAAZ,CAAuB,IAAvB,CAAf;AACA,aAAKC,SAAL,GAAiB,EAAjB;;AAEA,aAAKC,KAAL,CAbU,CAaA;AACV,aAAKC,MAAL,CAdU,CAcC;AACX,aAAKC,UAAL;AACA,aAAKC,UAAL;;AAEA;AACA,aAAKC,eAAL;AACH;;AAEDC,mBAAe;;AAEX,aAAKL,KAAL,GAAa,KAAKN,KAAL,CAAWY,WAAxB;AACA,aAAKL,MAAL,GAAc,KAAKP,KAAL,CAAWa,YAAzB;;AAEA,aAAKX,MAAL,CAAYI,KAAZ,GAAoB,KAAKA,KAAzB;AACA,aAAKJ,MAAL,CAAYK,MAAZ,GAAqB,KAAKA,MAA1B;;AAEA,aAAKJ,OAAL,CAAaW,wBAAb,GAAwC,KAAxC;AACA,aAAKX,OAAL,CAAaY,2BAAb,GAA2C,KAA3C;AACA,aAAKZ,OAAL,CAAaa,qBAAb,GAAqC,KAArC;;AAEA;AACA,aAAKC,WAAL;;AAEA;AACA,aAAKC,UAAL;;AAEA;AACA,aAAKV,UAAL,GAAkBW,YAAY,MAAM,KAAKC,gBAAL,EAAlB,EAA2C,IAA3C,CAAlB;AACH;;AAEDH,kBAAc;AACV,YAAII,OAAOvB,SAASwB,sBAAT,CAAgC,QAAhC,CAAX;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,KAAKjE,MAAzB,EAAiCmE,GAAjC,EAAsC;AAClCF,iBAAKE,CAAL,EAAQC,gBAAR,CAAyB,OAAzB,EAAmCC,CAAD,IAAO,KAAKC,UAAL,CAAgBD,CAAhB,EAAmBF,CAAnB,CAAzC;AACH;AACDzB,iBAASC,cAAT,CAAwB,OAAxB,EAAiCyB,gBAAjC,CAAkD,OAAlD,EAA4DC,CAAD,IAAO;AAAC,iBAAK7B,QAAL,GAAgB,IAAhB;AAAqB,SAAxF;AACH;;AAED8B,eAAWD,CAAX,EAAcF,CAAd,EAAiB;AACb;AACA,aAAK7B,OAAL,CAAarD,KAAb,CAAmB,KAAKoE,UAAxB,EAAoCc,CAApC,EAFa,CAE0B;;AAEvC;AACA,YAAII,MAAM7B,SAAS8B,aAAT,CAAuB,KAAvB,CAAV;AACAD,YAAIE,GAAJ,GAAU,KAAK3B,MAAL,CAAY4B,SAAZ,EAAV;AACAhC,iBAASwB,sBAAT,CAAgC,MAAhC,EAAwCC,CAAxC,EAA2CQ,WAA3C,CAAuDJ,GAAvD;AACH;;AAEDK,kBAAc;AACV,YAAIzF,QAAQ,KAAKmD,OAAL,CAAa9C,QAAb,CAAsB,KAAK6D,UAA3B,CAAZ;AACA;AACA,aAAKZ,OAAL,CAAagC,GAAb,GAAmB,KAAKlC,MAAL,CAAYpD,KAAZ,CAAnB,CAHU,CAG4B;AACzC;;AAED2E,iBAAa;AACT;AACA,aAAKf,OAAL,CAAa8B,SAAb,CAAuB,KAAKjC,KAA5B,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,KAAKK,SAA9C,EAAyD,KAAKA,SAA9D;AACA,aAAKF,OAAL,CAAa8B,SAAb,CAAuB,KAAK/B,MAA5B,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,KAAKG,SAA/C,EAA0D,KAAKA,SAA/D,EAA0E,CAA1E,EAA6E,CAA7E,EAAgF,KAAKC,KAArF,EAA4F,KAAKC,MAAjG;;AAEA;AACA,YAAI,KAAKX,QAAT,EAAmB,KAAKoC,WAAL;;AAEnB;AACA;;AAEA;AACAE,mBAAW,MAAM,KAAKhB,UAAL,EAAjB,EAAoC,GAApC;AACH;;AAED;AACA;AACA;AACAE,uBAAkB;;AAEd,aAAKX,UAAL,GAAkB,EAAlB;;AAEA,aAAK,IAAI0B,MAAM,CAAf,EAAkBA,MAAM,KAAK9B,SAAL,GAAiB,KAAKA,SAA9C,EAAyD8B,KAAzD,EAAgE;AAC5D,gBAAIC,MAAMD,MAAM,KAAK9B,SAArB;AACA,gBAAIgC,MAAMnE,KAAKoE,KAAL,CAAWH,MAAM,KAAK9B,SAAtB,CAAV;;AAEA,gBAAIkC,IAAIH,OAAO,KAAK9B,KAAL,GAAa,KAAKD,SAAzB,CAAR;AACA,gBAAImC,IAAIH,OAAO,KAAK9B,MAAL,GAAc,KAAKF,SAA1B,CAAR;;AAEA;AACA,gBAAIoC,IAAI,KAAKtC,OAAL,CAAauC,YAAb,CAA0BH,IAAI,KAAKjC,KAAL,GAAa,EAA3C,EAA+CkC,IAAI,KAAKjC,MAAL,GAAc,EAAjE,EAAqE,CAArE,EAAwE,CAAxE,EAA2EoC,IAAnF;;AAEA;AACA;AACA,gBAAIC,eAAe,eAAKjE,YAAL,CAAkB8D,EAAE,CAAF,CAAlB,EAAuBA,EAAE,CAAF,CAAvB,EAA4BA,EAAE,CAAF,CAA5B,CAAnB;AACA,iBAAKhC,UAAL,CAAgB9D,IAAhB,CAAqBiG,YAArB;AACH;AAEJ;;AAEDlC,sBAAiB;AACb;AACA,YAAImC,UAAUC,YAAd,EAA4B;AACxBD,sBAAUC,YAAV,CAAuBC,YAAvB,CAAoC,EAAE/C,OAAO,IAAT,EAApC;AACI;AADJ,aAEKgD,IAFL,CAEWC,MAAD,IAAY;AACd,qBAAKjD,KAAL,CAAWkD,SAAX,GAAuBD,MAAvB;AACA,qBAAKjD,KAAL,CAAWwB,gBAAX,CAA4B,SAA5B,EAAuC,MAAI,KAAKb,YAAL,EAA3C;AACA;AACH,aANL;AAOI;AAPJ,aAQKwC,KARL,CAQYC,KAAD,IAAW;AACdtD,yBAASuD,IAAT,CAAcC,WAAd,GAA4B,yCAAyCF,MAAMG,IAA3E;AACH,aAVL;AAWH;AACJ;AA5HoB;AFTV,MAAMtH,KAAN,CAAY;AACzBC,cAAYC,CAAZ,EAAe,CEQIsD,KA+HrB;AFtII,SAAKtD,CAAL,GAASA,CAAT;AEuIJ,AFtII,IEsIAsD,GAAJ,EFtISrD,QAAL,GAAgB,EAAhB;AACD;AACD;AACA;AACA;AACAC,QAAMC,MAAN,EAAcC,KAAd,EAAqB;AACnB,QAAIC,MAAM,EAAEC,GAAGH,MAAL,EAAaI,KAAKH,KAAlB,EAAV;AACA,SAAKH,QAAL,CAAcO,IAAd,CAAmBH,GAAnB;AACD;AACDI,WAASH,CAAT,EAAY;AACV,QAAII,WAAW,EAAf;AACA,QAAIC,OAAO,CAAX;AACA,SAAKV,QAAL,CAAcW,OAAd,CAAuBP,GAAD,IAAS;AAAG;AAChC,UAAIQ,IAAI,EAAEC,GAAG,KAAKC,IAAL,CAAUT,CAAV,EAAaD,IAAIC,CAAjB,CAAL,EAA0BU,MAAMX,IAAIE,GAApC,EAAR;AACA,UAAIG,SAASO,MAAT,GAAkB,KAAKjB,CAA3B,EAA8B;AAC5BU,iBAASF,IAAT,CAAcK,CAAd;AACAF,eAAO,KAAKO,SAAL,CAAeP,IAAf,EAAqBD,QAArB,CAAP;AACD,OAHD,MAIK;AACH,YAAIG,EAAEC,CAAF,GAAMH,IAAV,EAAgB;AACd,cAAIQ,OAAO,IAAX;AACA,cAAIC,QAAQ,CAAZ;AACA,iBAAOD,IAAP,EAAa;AACX,gBAAIE,OAAOX,SAASU,KAAT,EAAgBN,CAAvB,MAA8BH,IAAlC,EAAwC;AACtCD,uBAASY,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB,EAA0BP,CAA1B;AACAF,qBAAO,KAAKO,SAAL,CAAeP,IAAf,EAAqBD,QAArB,CAAP;AACAS,qBAAO,KAAP;AACD,aAJD,MAKK;AACH,kBAAIC,QAAQV,SAASO,MAAT,GAAkB,CAA9B,EAAiC;AAC/BG;AACD,eAFD,MAGK;AACHD,uBAAO,KAAP;AACD;AACF;AACF;AACF;AACF;AAEF,KA5BD;AA6BA,QAAII,QAAQ,EAAZ;;AAEA,SAAI,IAAIC,EAAR,IAAcd,QAAd,EAAwB;AACtBa,YAAMf,IAAN,CAAWgB,GAAGR,IAAd;AACD;;AAED;AACA;AACA;AACA,WAAO,KAAKS,IAAL,CAAUF,KAAV,CAAP;AACD;AACD;AACA;AACA;AACAR,OAAKW,EAAL,EAASC,EAAT,EAAa;AACX,QAAIC,MAAM,CAAV;AACAF,OAAGd,OAAH,CAAW,CAACiB,GAAD,EAAMC,KAAN,KAAgB;AACzBF,aAAOG,KAAKC,GAAL,CAASH,MAAMF,GAAGG,KAAH,CAAf,EAA0B,CAA1B,CAAP;AACD,KAFD;AAGA,WAAOC,KAAKE,IAAL,CAAUL,GAAV,CAAP;AACD;AACDV,YAAUW,GAAV,EAAeK,GAAf,EAAoB;AAClB,QAAIC,MAAM,CAAV;;AAEA,SAAI,IAAI9B,GAAR,IAAe6B,GAAf,EAAoB;AAClBC,YAAMJ,KAAKI,GAAL,CAASA,GAAT,EAAc9B,IAAIS,CAAlB,CAAN;AACD;;AAED;AACA;AACA;AACA,WAAOqB,GAAP;AACD;AACDV,OAAKW,KAAL,EAAY;AACV,QAAIC,YAAY,EAAhB,CADU,CACU;AACpB,QAAIF,MAAM,CAAV,CAFU,CAEG;AACb,QAAIG,MAAJ,CAHU,CAGG;AACb,SAAK,IAAIhC,CAAT,IAAc8B,KAAd,EAAqB;AACnBC,gBAAUD,MAAM9B,CAAN,CAAV,IAAsB,CAAC+B,UAAUD,MAAM9B,CAAN,CAAV,KAAuB,CAAxB,IAA6B,CAAnD,CADmB,CACkC;AACrD,UAAI+B,UAAUD,MAAM9B,CAAN,CAAV,IAAsB6B,GAA1B,EAA+B;AAAE;AAC/BA,cAAME,UAAUD,MAAM9B,CAAN,CAAV,CAAN,CAD6B,CACF;AAC3BgC,iBAASF,MAAM9B,CAAN,CAAT,CAF6B,CAEF;AAC5B;AACF;AACD,WAAOgC,MAAP;AACD;AAzFwB;;kBAANxC,OA4FrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;;;;;AAEe,MAAMyC,IAAN,CAAW;AACtB,WAAOC,YAAP,CAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,IAAhC,EAAsC;AAClC,YAAIC,IAAIH,MAAM,IAAd;AACA,YAAII,IAAIH,QAAQ,IAAhB;AACA,YAAII,IAAIH,OAAO,IAAf;AACA,eAAO,CAACC,KAAK,EAAN,KAAaC,KAAK,EAAlB,KAAyBC,KAAK,CAA9B,IAAoC,CAA3C,CAJkC,CAIa;AAClD;;AAED,WAAOC,YAAP,CAAoBC,SAApB,EAA+B;AAC3B,YAAIP,MAAMO,aAAa,EAAb,GAAkB,IAA5B;AACA,YAAIN,QAAQM,aAAa,EAAb,GAAkB,IAA9B;AACA,YAAIL,OAAOK,aAAa,CAAb,GAAiB,IAA5B;AACA,YAAIC,QAAQD,YAAY,IAAxB;AACAE,gBAAQC,GAAR,CAAY,YAAYV,GAAZ,GAAkB,GAAlB,GAAwBC,KAAxB,GAAgC,GAAhC,GAAsCC,IAAlD;AACH;;AAED,WAAOS,QAAP,CAAgBR,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACrB,YAAIF,IAAI,GAAJ,IAAWC,IAAI,GAAf,IAAsBC,IAAI,GAA9B,EACI,MAAM,yBAAN;AACJ,eAAO,CAAEF,KAAK,EAAN,GAAaC,KAAK,CAAlB,GAAuBC,CAAxB,EAA2BO,QAA3B,CAAoC,EAApC,CAAP;AACH;AApBqB;kBAALd","file":"ccb2f1e405b896a9b5181e2e98f65722.map","sourcesContent":["export default class KNear {\n  constructor(k) {\n    this.k = k\n    this.training = []\n  }\n  //\n  // PUBLIC METHODS : LEARN AND CLASSIFY\n  //\n  learn(vector, label) {\n    let obj = { v: vector, lab: label }\n    this.training.push(obj)\n  }\n  classify(v) {\n    let voteBloc = []\n    let maxD = 0\n    this.training.forEach((obj) => {  // todo for of\n      let o = { d: this.dist(v, obj.v), vote: obj.lab }\n      if (voteBloc.length < this.k) {\n        voteBloc.push(o)\n        maxD = this.updateMax(maxD, voteBloc)\n      }\n      else {\n        if (o.d < maxD) {\n          let bool = true\n          let count = 0\n          while (bool) {\n            if (Number(voteBloc[count].d) === maxD) {\n              voteBloc.splice(count, 1, o)\n              maxD = this.updateMax(maxD, voteBloc)\n              bool = false\n            }\n            else {\n              if (count < voteBloc.length - 1) {\n                count++\n              }\n              else {\n                bool = false\n              }\n            }\n          }\n        }\n      }\n\n    })\n    let votes = []\n\n    for(let el of voteBloc) {\n      votes.push(el.vote)\n    }\n\n    //voteBloc.forEach((el) => {\n    //  votes.push(el.vote)\n    //})\n    return this.mode(votes)\n  }\n  //\n  // TODO PRIVATE UTILITY METHODS\n  //\n  dist(v1, v2) {\n    let sum = 0\n    v1.forEach((val, index) => {\n      sum += Math.pow(val - v2[index], 2)\n    })\n    return Math.sqrt(sum)\n  }\n  updateMax(val, arr) {\n    let max = 0\n\n    for(let obj of arr) {\n      max = Math.max(max, obj.d)\n    }\n\n    //arr.forEach((obj) => {\n    //  max = Math.max(max, obj.d)\n    //})\n    return max\n  }\n  mode(store) {\n    let frequency = {}  // array of frequency.\n    let max = 0  // holds the max frequency.\n    let result   // holds the max frequency element.\n    for (let v in store) {\n      frequency[store[v]] = (frequency[store[v]] || 0) + 1 // increment frequency.\n      if (frequency[store[v]] > max) { // is this frequency > max so far ?\n        max = frequency[store[v]]  // update max.\n        result = store[v]          // update result.\n      }\n    }\n    return result\n  }\n}\n\n/* MODIFIED FROM https://github.com/NathanEpstein/KNear\n\nCopyright(c) 2014 Nathan Epstein\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/","'use strict';\n\nexport default class Util {\n    static rgbToDecimal(red, green, blue) {\n        var r = red & 0xFF;\n        var g = green & 0xFF;\n        var b = blue & 0xFF;\n        return (r << 24) + (g << 16) + (b << 8) + (1); // alpha = 1\n    }\n\n    static decimalToRgb(decNumber) {\n        var red = decNumber >> 24 & 0xFF;\n        var green = decNumber >> 16 & 0xFF;\n        var blue = decNumber >> 8 & 0xFF;\n        var alpha = decNumber & 0xFF;\n        console.log(\"rvs is \" + red + \",\" + green + \",\" + blue)\n    }\n\n    static rgbToHex(r, g, b) {\n        if (r > 255 || g > 255 || b > 255)\n            throw \"Invalid color component\";\n        return ((r << 16) | (g << 8) | b).toString(16);\n    }\n}","'use strict';\n\nimport KNear from './knear'\nimport Util from \"./util\"\n\nimport image0 from '../images/image0.png';\nimport image1 from '../images/image1.png';\nimport image2 from '../images/image2.png';\n\nexport default class App {\n    constructor() {\n        this.machine = new KNear(3)\n\n        this.images = [image0, image1, image2]\n\n        this.labelcam = false\n\n        this.learned = document.getElementById(\"learned\")\n        this.video = document.querySelector('video')\n        this.canvas = document.querySelector('#mosaic')\n        this.context = this.canvas.getContext('2d')\n        this.numpixels = 10\n\n        this.width// 340 \n        this.height// 255\n        this.intervalid\n        this.webcamData\n\n        // start the stream\n        this.initVideoStream()\n    }\n\n    initSettings() {\n\n        this.width = this.video.offsetWidth\n        this.height = this.video.offsetHeight\n\n        this.canvas.width = this.width\n        this.canvas.height = this.height\n\n        this.context.mozImageSmoothingEnabled = false\n        this.context.webkitImageSmoothingEnabled = false\n        this.context.imageSmoothingEnabled = false\n\n        // buttons\n        this.initButtons()\n\n        // redraw the video input 60 times/second as a mosaic\n        this.drawMosaic()\n\n        // create tensor data every second\n        this.intervalid = setInterval(() => this.displayPixelData(), 1000)  \n    }\n\n    initButtons() {\n        let btns = document.getElementsByClassName(\"record\")\n        for (let i = 0; i < btns.length; i++) {\n            btns[i].addEventListener(\"click\", (e) => this.recordData(e, i))\n        }\n        document.getElementById(\"train\").addEventListener(\"click\", (e) => {this.labelcam = true})\n    }\n\n    recordData(e, i) {\n        //console.log(\"adding vector to \" + i + \"   entries:\" + this.webcamData.length)\n        this.machine.learn(this.webcamData, i) // use i as a label ?\n\n        // add a nice little thumbnail to see what we trained\n        let img = document.createElement('img')\n        img.src = this.canvas.toDataURL()\n        document.getElementsByClassName(\"data\")[i].appendChild(img)\n    }\n\n    labelWebcam() {\n        let label = this.machine.classify(this.webcamData)\n        //console.log(\"current webcam is seen as \" + label)\n        this.learned.src = this.images[label] // label i \n    }\n\n    drawMosaic() {\n        // drawing the video very small causes pixelation. then blow up the canvas image itself\n        this.context.drawImage(this.video, 0, 0, this.numpixels, this.numpixels)\n        this.context.drawImage(this.canvas, 0, 0, this.numpixels, this.numpixels, 0, 0, this.width, this.height)\n\n        // als label aan staat dan meteen checken welke class dit is\n        if (this.labelcam) this.labelWebcam()\n    \n        // draw 60 times / second\n        // requestAnimationFrame(()=>this.drawMosaic())\n\n        // or draw only 10 times/second\n        setTimeout(() => this.drawMosaic(), 100)\n    }\n\n    //\n    // get a tensor with 100 dimensions, do this every second\n    //\n    displayPixelData(){\n        \n        this.webcamData = []\n\n        for (let pos = 0; pos < this.numpixels * this.numpixels; pos++) {\n            let col = pos % this.numpixels\n            let row = Math.floor(pos / this.numpixels)\n            \n            let x = col * (this.width / this.numpixels) \n            let y = row * (this.height / this.numpixels)\n\n            // sample locatie niet linksboven rect maar in het midden\n            let p = this.context.getImageData(x + this.width / 20, y + this.height / 20, 1, 1).data  \n\n            // rgb waarde bij voorkeur als 1 decimal doorgeven, anders krijgt kNear drie losse waarden binnen of hexwaarde\n            // console.log(\"rgb is \" + p[0] + \",\" + p[1] + \",\" + p[2]);\n            let decimalColor = Util.rgbToDecimal(p[0],p[1],p[2])\n            this.webcamData.push(decimalColor)\n        }\n\n    }\n\n    initVideoStream(){\n        // docs: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n        if (navigator.mediaDevices) {\n            navigator.mediaDevices.getUserMedia({ video: true })\n                // permission granted:\n                .then((stream) => {\n                    this.video.srcObject = stream;\n                    this.video.addEventListener(\"playing\", ()=>this.initSettings())\n                    //video.addEventListener('click', takeSnapshot)\n                })\n                // permission denied:\n                .catch((error) => {\n                    document.body.textContent = 'Could not access the camera. Error: ' + error.name\n                })\n        }\n    }\n}\n\n// init the app\nnew App()"]}